name: Terraform Plan AWS 

on: 
  push

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2.1.0

     # Static analysis of Terraform templates to spot potential security issues
     # Marketplace: https://github.com/marketplace/actions/terraform-security-scan   
      # - name: "Setup - Security Scan"
      #   uses: triat/terraform-security-scan@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

     # Provides AWS credentials to Terraform
     # By default, Terraform checks the home directory for a .aws folder with a credential file
     # Documentation: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/create-shared-credentials-file.html
      - name: "Setup - Build AWS Credentials"
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
     
     
     
      # - name: "Setup - Terraform CLI"
      #   uses: hashicorp/setup-terraform@v1.0.1

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Terraform Init"
        run: terraform init -input=false
        working-directory: ./setup/AWS

      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
      - name: "Terraform Plan"
        id: plan
        run: terraform plan -input=false -no-color
        working-directory: ./setup/AWS


      - name: "Run - Terraform Apply"
        run: terraform apply -input=false -auto-approve
        working-directory: ./setup/AWS

      # Submit a comment with the plan output to the pull request
      # - name: "Terraform Comment"
      #   uses: actions/github-script@0.9.0
        # env:
        #   PLAN: "${{ steps.plan.outputs.stdout }}"
        # with:
        #   github-token: ${{ secrets.GITHUB_TOKEN }}
        #   script: |
        #     github.issues.createComment({
        #       owner: context.repo.owner,
        #       repo: context.repo.repo,
        #       body: output
        #     })


















      # - name: 'Terraform Init'
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.12.18
      #     tf_actions_subcommand: 'init'
      #     tf_actions_working_dir: 'setups/AWS'
      #     tf_actions_comment: true
      
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: 'Terraform Plan'
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.12.18
      #     tf_actions_subcommand: 'plan'
      #     tf_actions_working_dir: 'setups/AWS'
      #     args: '-var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}"'
      # - name: 'Terraform Apply'
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: 0.12.18
      #     tf_actions_subcommand: 'apply'
      #     tf_actions_working_dir: 'setups/AWS'
      #     args: '-var="AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID}}" -var="AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY}}"'       
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}